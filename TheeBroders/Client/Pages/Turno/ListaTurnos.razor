@page "/Turnos"
@inject IHttpService http
<body>
<h3 style="text-align:center">LISTA TURNOS</h3>
<br />
<table class="table table-striped table-dark">
    <thead>
        <tr style="border:1px solid"><th>ID</th>
            <th scope="col">NombreCliente</th>
            <th scope="col">Fecha</th>
            <th scope="col">Hora</th>
            <th scope="col">ClienteID</th>
        </tr>
    </thead>
    <tbody> 
    @if (turnos == null)
    {<tr> No se encontraron datos....</tr>}
    else if(turnos.Count==0)
    {<tr>NO EXISTEN DATOS</tr>}
    else @foreach (var item in turnos)
        {<tr>
                <th scope="row">@item.ID</th>
                <td>@item.Cliente.Nombre</td>
                <td>@item.fecha</td>
                <td>@item.Hora</td>
                <td>@item.ClienteID</td>
         </tr>           
            
        }
    </tbody>
</table>
<br />
<a class="btn btn-primary" href="/Turnos/Crear">Nueva turno</a>
</body>
@code {
    List<Turno> turnos;
    List<Cliente> clientes;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        await leer();
        await leer2();
    }

    private async Task leer()
    {
        var respueta = await http.get<List<Turno>>("api/Turnos");
        if (!respueta.Error)
        {
            turnos = respueta.Respuesta;
        }
        
        
    }
    private async Task leer2()
    {
        var respueta = await http.get<List<Cliente>>("api/cliente");
        if (!respueta.Error)
        {
            clientes = respueta.Respuesta;
        }

        

    }
}
